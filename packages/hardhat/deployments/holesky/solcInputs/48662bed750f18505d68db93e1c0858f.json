{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract Faucet is ReentrancyGuard {\n\n\taddress public owner;\n\tuint256 public dailyLimit;\n\tuint256 public totalLimit;\n\tbool public faucetActive = true;\n\n\tmapping(address => uint256) public totalWithdrawn;\n\tmapping(address => uint256) public lastWithdrawTime;\n\tuint256 public withdrawFrequency;\n\tmapping(address => bool) public whitelist;\n\n\t// Events for logging actions in the contract\n\tevent WhitelistUpdated(address indexed _address, bool _status);\n\tevent Withdrawal(address indexed _user, uint256 _amount);\n\tevent WithdrawAll(address indexed _relayer, uint256 _balance);\n\tevent OwnershipTransferred(\n\t\taddress indexed previousOwner,\n\t\taddress indexed newOwner\n\t);\n\tevent FaucetStatusUpdated(bool active);\n\n\t// Modifier to restrict access to the owner only\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner, \"No eres el propietario\");\n\t\t_;\n\t}\n\n\t// Modifier to restrict access to whitelisted addresses only\n\tmodifier onlyWhitelisted() {\n\t\trequire(whitelist[msg.sender], \"Address no esta en lista blanca\");\n\t\t_;\n\t}\n\n\t// Modifier to check if the faucet is active\n\tmodifier faucetIsActive() {\n\t\trequire(faucetActive, \"El faucet se encuentra inactivo\");\n\t\t_;\n\t}\n\n\t// Constructor to set the contract deployer as the owner\n\tconstructor(address[] memory _whitelistedAddresses) payable {\n\t\tdailyLimit = 0.05 ether;\n\t\ttotalLimit = 0.5 ether;\n\t\twithdrawFrequency = 24 hours;\n\t\towner = msg.sender;\n\t\tfor (uint256 i = 0; i < _whitelistedAddresses.length; i++) {\n\t\t\taddToWhitelist(_whitelistedAddresses[i]);\n\t\t}\n\t}\n\n\t// Function to add an address to the whitelist, only callable by the owner\n\tfunction addToWhitelist(address _address) public onlyOwner {\n\t\twhitelist[_address] = true;\n\t\temit WhitelistUpdated(_address, true);\n\t}\n\n\t// Function to remove an address from the whitelist, only callable by the owner\n\tfunction removeFromWhitelist(address _address) external onlyOwner {\n\t\twhitelist[_address] = false;\n\t\temit WhitelistUpdated(_address, false);\n\t}\n\n\t// Function to deposit ETH into the contract, only callable by the owner\n\tfunction deposit() external payable onlyOwner {}\n\n\t// Function to allow a third party (relayer) to request withdrawal on behalf of a user\n\tfunction requestWithdraw(\n\t\taddress _user,\n\t\tuint256 _amount\n\t) external onlyWhitelisted nonReentrant faucetIsActive {\n\t\trequire(_amount <= dailyLimit, \"Ha excedido el monto diario\");\n\t\trequire(\n\t\t\ttotalWithdrawn[_user] + _amount <= totalLimit,\n\t\t\t\"Ha excedido el limite total\"\n\t\t);\n\t\trequire(\n\t\t\tblock.timestamp - lastWithdrawTime[_user] >= withdrawFrequency,\n\t\t\t\"Retiros solo permitidos en base al limite diario\"\n\t\t);\n\t\trequire(\n\t\t\taddress(this).balance >= _amount,\n\t\t\t\"No hay fondos suficientes en el faucet\"\n\t\t);\n\n\t\ttotalWithdrawn[_user] += _amount;\n\t\tlastWithdrawTime[_user] = block.timestamp;\n\n\t\t// Transfer ETH to the user\n\t\t(bool success, ) = _user.call{ value: _amount }(\"\");\n\t\trequire(success, \"Transferencia fallida\");\n\n\t\temit Withdrawal(_user, _amount);\n\t}\n\n\t// Function to allow whitelisted addresses to withdraw the entire balance of the faucet\n\tfunction withdrawAll()\n\t\texternal\n\t\tonlyWhitelisted\n\t\tnonReentrant\n\t\tfaucetIsActive\n\t{\n\t\tuint256 balance = address(this).balance;\n\t\trequire(balance > 0, \"No hay fondos para retirar\");\n\n\t\t// Transfer entire balance to the contract owner\n\t\t(bool success, ) = owner.call{ value: balance }(\"\");\n\t\trequire(success, \"Transferencia fallida\");\n\n\t\temit WithdrawAll(msg.sender, balance);\n\t}\n\n\t// Function to transfer ownership of the contract to a new owner\n\tfunction transferOwnership(address newOwner) external onlyOwner {\n\t\trequire(\n\t\t\tnewOwner != address(0),\n\t\t\t\"Nuevo propietario no puede ser address 0\"\n\t\t);\n\t\temit OwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n\t// Function to update daily limit, only callable by the owner\n\tfunction updateDailyLimit(uint256 _newLimit) external onlyOwner {\n\t\tdailyLimit = _newLimit;\n\t}\n\n\t// Function to update total limit, only callable by the owner\n\tfunction updateTotalLimit(uint256 _newLimit) external onlyOwner {\n\t\ttotalLimit = _newLimit;\n\t}\n\n\t// Function to update withdraw frequency, only callable by the owner\n\tfunction updateWithdrawFrequency(uint256 _newFrequency) external onlyOwner {\n\t\twithdrawFrequency = _newFrequency;\n\t}\n\n\t// Function to activate or deactivate the faucet, only callable by the owner\n\tfunction toggleFaucetStatus() external onlyOwner {\n\t\tfaucetActive = !faucetActive;\n\t\temit FaucetStatusUpdated(faucetActive);\n\t}\n\n\t// Function to get the current balance of the contract\n\tfunction getBalance() external view returns (uint256) {\n\t\treturn address(this).balance;\n\t}\n\n\t// Fallback function to receive ETH directly\n\treceive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}